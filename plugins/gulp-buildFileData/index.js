// Generated by CoffeeScript 1.7.1
(function() {
  var PLUGIN_NAME, PluginError, buildImageData, fs, getFilenames, gutil, path, through, _;

  path = require("path");

  gutil = require("gulp-util");

  PluginError = gutil.PluginError;

  through = require("through2");

  fs = require("fs");

  _ = require("lodash");

  PLUGIN_NAME = "buildFileData";

  buildImageData = function(files, existingData, split) {
    var f, k, objectify, _i, _len, _results;
    objectify = function(f, k) {
      var className, data, ex, extname;
      extname = path.extname(f);
      className = path.basename(f, extname);
      if (split) {
        className = className.split(split)[0];
      }
      data = data = {
        className: className,
        hex: ""
      };
      if (existingData != null) {
        ex = _.find(existingData, {
          className: className
        });
        if (ex != null) {
          data = ex;
        }
      }
      return data;
    };
    gutil.log(gutil.colors.green("[" + PLUGIN_NAME + "] Building image data for " + files.length + " files."));
    _results = [];
    for (k = _i = 0, _len = files.length; _i < _len; k = ++_i) {
      f = files[k];
      _results.push(objectify(f, k));
    }
    return _results;
  };

  getFilenames = function(options) {
    var err, stream;
    if (!options) {
      err = "You must provide values for iconImagePath: , iconDataPath: and iconSplitOnChar: in config.yaml";
      throw new PluginError(PLUGIN_NAME, gutil.colors.red(err));
    }
    stream = through.obj(function(file, enc, cb) {
      var images;
      images = path.join(process.cwd(), options.inputFile);
      return fs.exists(options.outputFile, (function(_this) {
        return function(exists) {
          var existingData;
          if (exists) {
            existingData = JSON.parse(fs.readFileSync(options.outputFile, "utf8"));
          }
          return fs.readdir(images, function(err, files) {
            var dataObject, newFile;
            dataObject = buildImageData(files, existingData, options.iconSplit);
            newFile = new gutil.File({
              base: "./",
              cwd: "./",
              path: "./",
              contents: new Buffer(JSON.stringify(dataObject, "", 2))
            });
            _this.push(newFile);
            return cb();
          });
        };
      })(this));
    });
    return stream;
  };

  module.exports = getFilenames;

}).call(this);

//# sourceMappingURL=index.map
