// Generated by CoffeeScript 1.7.1
(function() {
  var PLUGIN_NAME, PluginError, buildClass, buildIcon, className, counter, createBuffers, fs, gutil, hexToRGB, path, reg, selector, through, _;

  _ = require("lodash");

  through = require("through2");

  gutil = require("gulp-util");

  PluginError = gutil.PluginError;

  path = require("path");

  fs = require("fs");

  PLUGIN_NAME = "gulp-iconbuilder";

  reg = new RegExp("(@).*(:).*(,).*(,).*(,).*(;)", "i");

  counter = 0;

  hexToRGB = function(h) {
    var B, G, R, cutHex;
    cutHex = function(h) {
      if (h.charAt(0) === "#") {
        return h.substring(1, 7);
      } else {
        return h;
      }
    };
    R = (function() {
      return parseInt((cutHex(h)).substring(0, 2), 16);
    })();
    G = (function() {
      return parseInt((cutHex(h)).substring(2, 4), 16);
    })();
    B = (function() {
      return parseInt((cutHex(h)).substring(4, 6), 16);
    })();
    return "" + R + "," + G + "," + B;
  };

  selector = function(line) {
    return line.split(":")[0];
  };

  className = function(selector) {
    return selector.split("@")[1].split("-")[0];
  };

  buildClass = function(icon, selector, color) {
    var c, rgb;
    if (color !== "") {
      rgb = hexToRGB(color);
      c = "." + icon + " {\n  .sprite(" + selector + ");\n  background-color: rgb(" + rgb + ");\n}";
    } else {
      c = "." + icon + " {\n  .sprite(" + selector + ");\n}";
    }
    return c;
  };

  createBuffers = function(array, colors) {
    var append, buffers, c, count, key, line, s, _i, _len;
    count = 0;
    buffers = [];
    buffers.push(new Buffer("@import 'sprites';\n\n"));
    for (key = _i = 0, _len = array.length; _i < _len; key = ++_i) {
      line = array[key];
      if (reg.test(line)) {
        s = selector(line);
        c = className(s);
        if (c === colors[key].className) {
          append = buildClass("icon." + c, s, colors[key].hex);
          buffers.push(new Buffer("" + append + "\n\n"));
          count++;
        }
      }
    }
    gutil.log(gutil.colors.green("[" + PLUGIN_NAME + "] built " + count + " Icons."));
    return buffers;
  };

  buildIcon = function(options) {
    var stream;
    if (options == null) {
      options = {
        dataFile: false,
        fileName: "magic.less"
      };
    }
    stream = through.obj(function(file, enc, cb) {
      var allBuffers, array, colors, dataFile, newFile;
      if (!options.dataFile) {
        this.push(file);
        cb();
        throw new PluginError(PLUGIN_NAME, "Options cannot be empty");
      }
      if (file.isNull()) {
        this.push(file);
        cb();
      }
      if (file.isBuffer()) {
        array = file.contents.toString().split("\n");
        dataFile = path.join(process.cwd(), options.dataFile);
        colors = JSON.parse(fs.readFileSync(dataFile, "utf8"));
        allBuffers = createBuffers(array, colors);
        newFile = new gutil.File({
          base: "./",
          cwd: "./",
          path: "" + options.outPutFile,
          contents: Buffer.concat(allBuffers)
        });
        this.push(newFile);
      } else {
        this.push(file);
        cb();
      }
      this.push(file);
      return cb();
    });
    return stream;
  };

  module.exports = buildIcon;

}).call(this);

//# sourceMappingURL=index.map
